{"version":3,"file":"static/js/367.f7927f1b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts.module.css?8552","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"btn\":\"ContactForm_btn__wll+u\"};","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { useState, useEffect } from 'react';\nimport css from './ContactForm.module.css';\nimport { Notify } from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addContact, fetchContactsList } from 'redux/contacts/operations';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { addContact, fetchContacts } from 'redux/contacts/contacts-operations';\nimport * as yup from 'yup';\n\nlet userSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/^[A-Za-z]+$/, 'Name should not contain numbers')\n    .required(),\n  number: yup.number('Number should not contains letters').required(),\n});\n\nfunction ContactForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    number: '',\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    mode: 'onBlur',\n    resolver: yupResolver(userSchema),\n  });\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts.items);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    const isValid = await userSchema.isValid(formData);\n\n    if (isValid) {\n      for (const contact of contacts) {\n        if (\n          formData.name.toLocaleLowerCase() === contact.name.toLocaleLowerCase()\n        ) {\n          return Notify.failure(`${formData.name} is already in contacts.`);\n        }\n      }\n\n      dispatch(addContact(formData));\n      reset();\n      Notify.success('Ð¡ontact added successfully');\n    } else {\n      return Notify.failure('Please enter correct data');\n    }\n  };\n\n  const reset = () => {\n    setFormData({\n      name: '',\n      number: '',\n    });\n  };\n\n  const errorMessageName =\n    !!errors?.name?.message && 'Name should not contain numbers';\n  const errorMessageNumber =\n    !!errors?.number?.message && 'Number should not contains letters';\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1 },\n      }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={e => handleSubmit(onSubmit(e))}\n      className={css.contactForm}\n    >\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Name\"\n        variant=\"outlined\"\n        type=\"text\"\n        name=\"name\"\n        required\n        {...register('name')}\n        value={formData.name}\n        onChange={handleChange}\n        error={!!errors?.name?.message}\n        helperText={errorMessageName}\n      />\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Phone\"\n        variant=\"outlined\"\n        type=\"tel\"\n        name=\"number\"\n        required\n        {...register('number')}\n        value={formData.number}\n        onChange={handleChange}\n        error={!!errors?.number?.message}\n        helperText={errorMessageNumber}\n      />\n      <button type=\"submit\" className={css.btn}>\n        Add Contact\n      </button>\n    </Box>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ContactList_btn__6Piat\",\"name\":\"ContactList_name__UCkFW\",\"list\":\"ContactList_list__csErn\"};","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\n// import { useEffect } from 'react';\n// import { useAuth } from 'hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n  const filteredContacts = contacts.filter(el =>\n    el.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase().trim())\n  );\n\n  //   useEffect(() => {\n  //     dispatch(fetchContacts());\n  //   }, [dispatch]);\n\n  return (\n    <ul className={css.list}>\n      {filteredContacts.map(({ id, name, number }) => {\n        return (\n          <li key={id} className={css.name}>\n            {name}: {number}\n            <button\n              className={css.btn}\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\n\nimport { filterContact } from 'redux/contacts/contacts-slice';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Box component=\"div\">\n      <TextField\n        label=\"Find contact by name\"\n        variant=\"outlined\"\n        className={css.input}\n        onChange={e => dispatch(filterContact(e.target.value))}\n        fullWidth\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__TJkHA\"};","// import { Contac } from 'components/Contacts/Contacts';\nimport ContactForm from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport css from './Contacts.module.css';\nexport default function Contacts() {\n  return (\n    <div className={css.container}>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["userSchema","yup","shape","name","matches","required","number","useState","formData","setFormData","useForm","mode","resolver","yupResolver","register","handleSubmit","errors","formState","dispatch","useDispatch","contacts","useSelector","state","items","useEffect","fetchContacts","handleChange","e","target","value","onSubmit","preventDefault","isValid","contact","toLocaleLowerCase","Notify","addContact","reset","errorMessageName","message","errorMessageNumber","Box","component","sx","m","noValidate","autoComplete","className","css","TextField","id","label","variant","type","onChange","error","helperText","ContactList","filter","filteredContacts","el","includes","trim","map","onClick","deleteContact","filterContact","fullWidth","Contacts"],"sourceRoot":""}